version: '3'

services:
  # The load balancer
  nginx:
    image: nginx:1.16.0-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8000:8000"
    depends_on:
      - backend1
      - backend2

  # The web server
  front:
    image: nginx:1.16.0-alpine
    ports:
      - "8080:80"
    volumes:
      - ./front-end/index.html:/usr/share/nginx/html/index.html
      - ./front-end/static:/usr/share/nginx/html/static
      - ./front-end/script.js:/usr/share/nginx/html/script.js
  redis:
      image: redis

  backend1:
    build: ./back-end/core
    ports:
        - "5000:5000"
    volumes:
        - ./back-end/core:/code
    depends_on:
        - redis
        - database
        - zookeeper
        - kafka
    environment:
      - SERVER_TAG=SERVER_ONE
    tty: true
    stdin_open: true

  backend2:
    build: ./back-end/core
    ports:
        - "5001:5000"
    volumes:
        - ./back-end/core:/code
    depends_on:
        - redis
        - database
        - zookeeper
        - kafka
    environment:
      - SERVER_TAG=SERVER_TWO
    tty: true
    stdin_open: true

  database:
    image: 'postgres:latest'
    ports:
      - 5432:5432
    env_file:
      - .env
    volumes:
      - ./db-data/:/var/lib/postgresql/data/
      - ./migrations/init_db.sql:/docker-entrypoint-initdb.d/init.sql

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
     - "2181:2181"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
  kafka:
    image: wurstmeister/kafka
    ports:
     - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orders:1:1"
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_BROKER_ID: 2  
  order-processor:
    build: ./back-end/orders
    volumes:
        - ./back-end/orders:/code
    depends_on:
        - kafka
        - backend1
        - database